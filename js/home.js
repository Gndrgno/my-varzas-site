import { initializeApp } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-app.js";
import {
  getFirestore,
  collection,
  addDoc,
  setDoc,
  doc,
  getDocs,
  getDoc,
  updateDoc,
  increment,
  limit
} from "https://www.gstatic.com/firebasejs/11.8.1/firebase-firestore.js";
import {
  getStorage,
  ref,
  uploadBytes,
  getDownloadURL
} from "https://www.gstatic.com/firebasejs/11.8.1/firebase-storage.js";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase
const firebaseConfig = {
  apiKey: "AIzaSyDObglb4gU10Xms1Es6-45UMSeT5vZvBxg",
  authDomain: "varzas.firebaseapp.com",
  projectId: "varzas",
  storageBucket: "varzas.appspot.com",
  messagingSenderId: "256701912950",
  appId: "1:256701912950:web:02c63f4bd8d3e893828c57"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const storage = getStorage(app);

const closeCross = document.getElementById("close-cross");
const whatIsThis = document.getElementById("what-is-this");
const agreeDisclaimer = document.getElementById("agree-disclaimer");
const closeDisclaimer = document.getElementById("close-disclaimer");
const closeDisclaimer2 = document.getElementById("close-disclaimer2");
const disclaimerWindow = document.getElementById("disclaimer-background");


//–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
closeCross.addEventListener("click", () => {
    whatIsThis.style.display = "none";
})

//–û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
agreeDisclaimer.addEventListener("click", () =>{
    disclaimerWindow.style.display = "none";
})
closeDisclaimer.addEventListener("click", () => {
    window.close()
})
closeDisclaimer2.addEventListener("click", () => {
    window.close()
})




const collections = [
  "–ß–µ—á–µ–Ω—Å–∫–∞—è –º—É–∑—ã–∫–∞",
  "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞",
  "–¢–∞–Ω—Ü—ã –∏ –æ–±—ã—á–∞–∏",
  "–ß–µ—á–µ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è",
  "–ù–∞—Ä–æ–¥–Ω—ã–µ —Å–∫–∞–∑–∞–Ω–∏—è",
  "–ò—Å—Ç–æ—Ä–∏—è —Ç–µ–π–ø–æ–≤",
  "–†–µ–º–µ—Å–ª–∞ –∏ —Ä—É–∫–æ–¥–µ–ª–∏–µ",
  "–ë—Ä–∞–∫ –∏ –Ω–∏–∫–∞—Ö",
  "–ñ–µ–Ω—Å–∫–∏–µ –¥–µ–ª–∞",
  "–í–æ—Å–ø–∏—Ç–∞–Ω–∏–µ –¥–µ—Ç–µ–π",
  "–ü—Ä–∏–¥–∞–Ω–æ–µ –∏ –º–∞—Ö—Ä",
  "–ú–Ω–æ–≥–æ–∂—ë–Ω—Å—Ç–≤–æ",
  "–†–∞–∑–≤–æ–¥—ã –∏ –ø—Ä–∞–≤–∞",
  "–í–æ–ø—Ä–æ—Å—ã —à–∞—Ä–∏–∞—Ç–∞",
  "–°—É–Ω–Ω–∞ –∏ —Ö–∞–¥–∏—Å—ã",
  "–°—É—Ñ–∏–∑–º –≤ –ß–µ—á–Ω–µ",
  "–ú–∞–≤–ª–∏–¥—ã –∏ –∑–∏–∫—Ä",
  "–ò—Å–ª–∞–º—Å–∫–æ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ",
  "–§–µ—Ç–≤—ã –∏ –±–æ–≥–æ—Å–ª–æ–≤–∏–µ",
  "–ñ–µ–Ω—â–∏–Ω–∞ –≤ –∏—Å–ª–∞–º–µ",
  "–ú—É–∑—ã–∫–∞",
  "–§–∏–ª—å–º—ã",
  "–Æ—Ç—É–± –∏ —Å—Ç—Ä–∏–º–µ—Ä—ã",
  "–ú–µ–º—ã",
  "–§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ",
  "–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥",
  "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
  "–£—á—ë–±–∞ –∏ –≤—É–∑—ã",
  "–ß–µ—á–µ–Ω—Ü—ã –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π",
  "–ú–æ–ª–æ–¥—ë–∂–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è",
  "TikTok –∏ —Å–æ—Ü—Å–µ—Ç–∏",
  "–£–ª–∏—á–Ω–∞—è –º–æ–¥–∞",
  "–õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
  "–ö–∞–∫ –Ω–∞–π—Ç–∏ —Å–µ–±—è",
  "–ù–æ—Ö—á–∞–ª–ª–∞ (–∫–æ–¥–µ–∫—Å —á–µ—Å—Ç–∏)",
  "–°–≤–∞–¥—å–±—ã –∏ –æ–±—Ä—è–¥—ã",
  "–¢–µ–π–ø–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞",
  "–†–æ–ª—å —Å—Ç–∞—Ä–µ–π—à–∏–Ω",
  "–°–µ–º–µ–π–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã",
  "–ì–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ",
  "–¢—Ä–∞–¥–∏—Ü–∏–∏ –∏–ª–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å",
  "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ",
  "–•–∞–ª—è–ª—å-–±–∏–∑–Ω–µ—Å",
  "–ñ–µ–Ω—â–∏–Ω—ã –≤ –±–∏–∑–Ω–µ—Å–µ",
  "–ì–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º—ã",
  "–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞",
  "–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ",
  "–†–∞–±–æ—Ç–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ß–†",
  "–ú–ú–ê –∏ –±–æ—Ä—å–±–∞",
  "–ì–¢–û –∏ —Ñ–∏—Ç–Ω–µ—Å",
  "–ü–∏—Ç–∞–Ω–∏–µ",
  "–¢—Ä–∞–≤–º—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
  "–°–ø–æ—Ä—Ç –≤ —à–∫–æ–ª–∞—Ö",
  "–ó–û–ñ",
  "–ù–∞—Ä–æ–¥–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞",
  "–î—Ä—É–≥–æ–µ..."
];

const popularPostsBlock = document.getElementById("popular-posts-block");
const loadingPopularPosts = document.getElementById("loading-popular-posts");

function getRandomCollections(count) {
  const shuffled = [...collections].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}

function convertTextToHTML(text) {
  const safeText = text
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;");

  const withFormatting = safeText
    .replace(/\*\*(.*?)\*\*/g, "<b>$1</b>")           // **–∂–∏—Ä–Ω—ã–π**
    .replace(/_(.*?)_/g, "<i>$1</i>")                 // _–∫—É—Ä—Å–∏–≤_
    .replace(/&lt;u&gt;(.*?)&lt;\/u&gt;/g, "<u>$1</u>"); // <u>–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ</u>

  return withFormatting.replace(/\n/g, "<br>");
}

async function loadPopularPosts() {
  console.log("üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ—Å—Ç—ã");

  const selectedCollections = getRandomCollections(8);
  console.log("üéØ –í—ã–±—Ä–∞–Ω—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", selectedCollections);

  const allPosts = [];

  for (const collectionName of selectedCollections) {
    try {
      const querySnapshot = await getDocs(collection(db, collectionName), limit(1));

      if (!querySnapshot.empty) {
        const docSnap = querySnapshot.docs[0];
        const data = docSnap.data();

        let text = data.text || "(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞)";
        if (text.length > 100) {
          text = text.substring(0, 100) + "...";
        }
        text = convertTextToHTML(text);

        allPosts.push({
          theme: collectionName,
          text: text,
          image: data.imageBase64 || "",
        });

        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ—Å—Ç –∏–∑ "${collectionName}"`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ "${collectionName}":`, error);
    }
  }

  popularPostsBlock.innerHTML = "";

  for (const post of allPosts) {
    const li = document.createElement("ul");
    li.className = "popular-post-item";
    li.innerHTML = `
      <h3 class="board-p-design">${post.theme}</h3>
      <img src="${post.image}" alt="Popular Post Image">
      <p style="text-align:center" class="board-p-design">${post.text}</p>
    `;
    popularPostsBlock.appendChild(li);
  }
  
  loadPopularPosts.style.display = "none";
  console.log("‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
}

loadPopularPosts();

async function calculateTotalImageWeight() {
  const ImagesAllWeight = document.getElementById("ImagesAllWeight");

  try {
    // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç stats/ImagesWeight
    const statsRef = doc(db, "stats", "ImagesWeight");
    const statsSnap = await getDoc(statsRef);

    if (statsSnap.exists()) {
      const data = statsSnap.data();
      const totalBytes = data.totalBytes || 0;

      // 2Ô∏è‚É£ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–µ—Å
      let totalSizeStr = "";
      if (totalBytes >= 1024 * 1024 * 1024) {
        totalSizeStr = `${(totalBytes / (1024 * 1024 * 1024)).toFixed(2)} –ì–ë`;
      } else if (totalBytes >= 1024 * 1024) {
        totalSizeStr = `${(totalBytes / (1024 * 1024)).toFixed(2)} –ú–ë`;
      } else {
        totalSizeStr = `${(totalBytes / 1024).toFixed(2)} –ö–ë`;
      }

      ImagesAllWeight.textContent = totalSizeStr;

    } else {
      // –î–æ–∫—É–º–µ–Ω—Ç –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      ImagesAllWeight.textContent = "0 –ö–ë";
    }

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ImagesWeight:", error);
    ImagesAllWeight.textContent = "–û—à–∏–±–∫–∞";
  }
}

calculateTotalImageWeight();

async function calculateTotalImageQuanity() {
  const ImagesAllQuanityEl = document.getElementById("ImagesAllQuanity");

  try {
    const quanityRef = doc(db, "stats", "ImagesAllQuanity");
    const quanitySnap = await getDoc(quanityRef);

    if (quanitySnap.exists()) {
      const data = quanitySnap.data();
      const count = data.count || 0;
      ImagesAllQuanityEl.textContent = count.toString();
    } else {
      ImagesAllQuanityEl.textContent = "0";
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ImagesAllQuanity:", error);
    ImagesAllQuanityEl.textContent = "–û—à–∏–±–∫–∞";
  }
}

calculateTotalImageQuanity();



